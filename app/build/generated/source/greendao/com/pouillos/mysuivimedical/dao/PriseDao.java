package com.pouillos.mysuivimedical.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pouillos.mysuivimedical.entities.Dose;
import com.pouillos.mysuivimedical.entities.Medicament;

import com.pouillos.mysuivimedical.entities.Prise;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRISE".
*/
public class PriseDao extends AbstractDao<Prise, Long> {

    public static final String TABLENAME = "PRISE";

    /**
     * Properties of entity Prise.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property DateString = new Property(2, String.class, "dateString", false, "DATE_STRING");
        public final static Property Effectue = new Property(3, boolean.class, "effectue", false, "EFFECTUE");
        public final static Property MedicamentId = new Property(4, long.class, "medicamentId", false, "MEDICAMENT_ID");
        public final static Property DoseId = new Property(5, long.class, "doseId", false, "DOSE_ID");
        public final static Property QteDose = new Property(6, float.class, "qteDose", false, "QTE_DOSE");
    }

    private DaoSession daoSession;


    public PriseDao(DaoConfig config) {
        super(config);
    }
    
    public PriseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRISE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DATE\" INTEGER," + // 1: date
                "\"DATE_STRING\" TEXT," + // 2: dateString
                "\"EFFECTUE\" INTEGER NOT NULL ," + // 3: effectue
                "\"MEDICAMENT_ID\" INTEGER NOT NULL ," + // 4: medicamentId
                "\"DOSE_ID\" INTEGER NOT NULL ," + // 5: doseId
                "\"QTE_DOSE\" REAL NOT NULL );"); // 6: qteDose
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRISE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Prise entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        String dateString = entity.getDateString();
        if (dateString != null) {
            stmt.bindString(3, dateString);
        }
        stmt.bindLong(4, entity.getEffectue() ? 1L: 0L);
        stmt.bindLong(5, entity.getMedicamentId());
        stmt.bindLong(6, entity.getDoseId());
        stmt.bindDouble(7, entity.getQteDose());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Prise entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        String dateString = entity.getDateString();
        if (dateString != null) {
            stmt.bindString(3, dateString);
        }
        stmt.bindLong(4, entity.getEffectue() ? 1L: 0L);
        stmt.bindLong(5, entity.getMedicamentId());
        stmt.bindLong(6, entity.getDoseId());
        stmt.bindDouble(7, entity.getQteDose());
    }

    @Override
    protected final void attachEntity(Prise entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Prise readEntity(Cursor cursor, int offset) {
        Prise entity = new Prise( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dateString
            cursor.getShort(offset + 3) != 0, // effectue
            cursor.getLong(offset + 4), // medicamentId
            cursor.getLong(offset + 5), // doseId
            cursor.getFloat(offset + 6) // qteDose
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Prise entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setDateString(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEffectue(cursor.getShort(offset + 3) != 0);
        entity.setMedicamentId(cursor.getLong(offset + 4));
        entity.setDoseId(cursor.getLong(offset + 5));
        entity.setQteDose(cursor.getFloat(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Prise entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Prise entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Prise entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getMedicamentDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getDoseDao().getAllColumns());
            builder.append(" FROM PRISE T");
            builder.append(" LEFT JOIN MEDICAMENT T0 ON T.\"MEDICAMENT_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN DOSE T1 ON T.\"DOSE_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Prise loadCurrentDeep(Cursor cursor, boolean lock) {
        Prise entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Medicament medicament = loadCurrentOther(daoSession.getMedicamentDao(), cursor, offset);
         if(medicament != null) {
            entity.setMedicament(medicament);
        }
        offset += daoSession.getMedicamentDao().getAllColumns().length;

        Dose dose = loadCurrentOther(daoSession.getDoseDao(), cursor, offset);
         if(dose != null) {
            entity.setDose(dose);
        }

        return entity;    
    }

    public Prise loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Prise> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Prise> list = new ArrayList<Prise>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Prise> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Prise> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
