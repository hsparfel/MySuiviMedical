package com.pouillos.mysuivimedical.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pouillos.mysuivimedical.entities.Contact;
import com.pouillos.mysuivimedical.entities.RdvContact;

import com.pouillos.mysuivimedical.entities.PhotoOrdonnance;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PHOTO_ORDONNANCE".
*/
public class PhotoOrdonnanceDao extends AbstractDao<PhotoOrdonnance, Long> {

    public static final String TABLENAME = "PHOTO_ORDONNANCE";

    /**
     * Properties of entity PhotoOrdonnance.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Path = new Property(1, String.class, "path", false, "PATH");
        public final static Property ContactId = new Property(2, long.class, "contactId", false, "CONTACT_ID");
        public final static Property RdvContactId = new Property(3, long.class, "rdvContactId", false, "RDV_CONTACT_ID");
        public final static Property Date = new Property(4, java.util.Date.class, "date", false, "DATE");
        public final static Property DateString = new Property(5, String.class, "dateString", false, "DATE_STRING");
    }

    private DaoSession daoSession;


    public PhotoOrdonnanceDao(DaoConfig config) {
        super(config);
    }
    
    public PhotoOrdonnanceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PHOTO_ORDONNANCE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PATH\" TEXT," + // 1: path
                "\"CONTACT_ID\" INTEGER NOT NULL ," + // 2: contactId
                "\"RDV_CONTACT_ID\" INTEGER NOT NULL ," + // 3: rdvContactId
                "\"DATE\" INTEGER," + // 4: date
                "\"DATE_STRING\" TEXT);"); // 5: dateString
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PHOTO_ORDONNANCE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PhotoOrdonnance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
        stmt.bindLong(3, entity.getContactId());
        stmt.bindLong(4, entity.getRdvContactId());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
 
        String dateString = entity.getDateString();
        if (dateString != null) {
            stmt.bindString(6, dateString);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PhotoOrdonnance entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(2, path);
        }
        stmt.bindLong(3, entity.getContactId());
        stmt.bindLong(4, entity.getRdvContactId());
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(5, date.getTime());
        }
 
        String dateString = entity.getDateString();
        if (dateString != null) {
            stmt.bindString(6, dateString);
        }
    }

    @Override
    protected final void attachEntity(PhotoOrdonnance entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PhotoOrdonnance readEntity(Cursor cursor, int offset) {
        PhotoOrdonnance entity = new PhotoOrdonnance( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // path
            cursor.getLong(offset + 2), // contactId
            cursor.getLong(offset + 3), // rdvContactId
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // dateString
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PhotoOrdonnance entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPath(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setContactId(cursor.getLong(offset + 2));
        entity.setRdvContactId(cursor.getLong(offset + 3));
        entity.setDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setDateString(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PhotoOrdonnance entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PhotoOrdonnance entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PhotoOrdonnance entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getContactDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getRdvContactDao().getAllColumns());
            builder.append(" FROM PHOTO_ORDONNANCE T");
            builder.append(" LEFT JOIN CONTACT T0 ON T.\"CONTACT_ID\"=T0.\"_id\"");
            builder.append(" LEFT JOIN RDV_CONTACT T1 ON T.\"RDV_CONTACT_ID\"=T1.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PhotoOrdonnance loadCurrentDeep(Cursor cursor, boolean lock) {
        PhotoOrdonnance entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Contact contact = loadCurrentOther(daoSession.getContactDao(), cursor, offset);
         if(contact != null) {
            entity.setContact(contact);
        }
        offset += daoSession.getContactDao().getAllColumns().length;

        RdvContact rdvContact = loadCurrentOther(daoSession.getRdvContactDao(), cursor, offset);
         if(rdvContact != null) {
            entity.setRdvContact(rdvContact);
        }

        return entity;    
    }

    public PhotoOrdonnance loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PhotoOrdonnance> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PhotoOrdonnance> list = new ArrayList<PhotoOrdonnance>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PhotoOrdonnance> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PhotoOrdonnance> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
