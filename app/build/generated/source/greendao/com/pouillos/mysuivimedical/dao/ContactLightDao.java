package com.pouillos.mysuivimedical.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pouillos.mysuivimedical.entities.ContactLight;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CONTACT_LIGHT".
*/
public class ContactLightDao extends AbstractDao<ContactLight, Long> {

    public static final String TABLENAME = "CONTACT_LIGHT";

    /**
     * Properties of entity ContactLight.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdPP = new Property(1, String.class, "idPP", false, "ID_PP");
        public final static Property CodeCivilite = new Property(2, String.class, "codeCivilite", false, "CODE_CIVILITE");
        public final static Property Nom = new Property(3, String.class, "nom", false, "NOM");
        public final static Property Prenom = new Property(4, String.class, "prenom", false, "PRENOM");
        public final static Property RaisonSocial = new Property(5, String.class, "raisonSocial", false, "RAISON_SOCIAL");
        public final static Property Complement = new Property(6, String.class, "complement", false, "COMPLEMENT");
        public final static Property Adresse = new Property(7, String.class, "adresse", false, "ADRESSE");
        public final static Property Cp = new Property(8, String.class, "cp", false, "CP");
        public final static Property Ville = new Property(9, String.class, "ville", false, "VILLE");
        public final static Property Telephone = new Property(10, String.class, "telephone", false, "TELEPHONE");
        public final static Property Fax = new Property(11, String.class, "fax", false, "FAX");
        public final static Property Email = new Property(12, String.class, "email", false, "EMAIL");
    }


    public ContactLightDao(DaoConfig config) {
        super(config);
    }
    
    public ContactLightDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CONTACT_LIGHT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID_PP\" TEXT NOT NULL ," + // 1: idPP
                "\"CODE_CIVILITE\" TEXT," + // 2: codeCivilite
                "\"NOM\" TEXT," + // 3: nom
                "\"PRENOM\" TEXT," + // 4: prenom
                "\"RAISON_SOCIAL\" TEXT," + // 5: raisonSocial
                "\"COMPLEMENT\" TEXT," + // 6: complement
                "\"ADRESSE\" TEXT," + // 7: adresse
                "\"CP\" TEXT," + // 8: cp
                "\"VILLE\" TEXT," + // 9: ville
                "\"TELEPHONE\" TEXT," + // 10: telephone
                "\"FAX\" TEXT," + // 11: fax
                "\"EMAIL\" TEXT);"); // 12: email
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CONTACT_LIGHT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactLight entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getIdPP());
 
        String codeCivilite = entity.getCodeCivilite();
        if (codeCivilite != null) {
            stmt.bindString(3, codeCivilite);
        }
 
        String nom = entity.getNom();
        if (nom != null) {
            stmt.bindString(4, nom);
        }
 
        String prenom = entity.getPrenom();
        if (prenom != null) {
            stmt.bindString(5, prenom);
        }
 
        String raisonSocial = entity.getRaisonSocial();
        if (raisonSocial != null) {
            stmt.bindString(6, raisonSocial);
        }
 
        String complement = entity.getComplement();
        if (complement != null) {
            stmt.bindString(7, complement);
        }
 
        String adresse = entity.getAdresse();
        if (adresse != null) {
            stmt.bindString(8, adresse);
        }
 
        String cp = entity.getCp();
        if (cp != null) {
            stmt.bindString(9, cp);
        }
 
        String ville = entity.getVille();
        if (ville != null) {
            stmt.bindString(10, ville);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(11, telephone);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(12, fax);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(13, email);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactLight entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getIdPP());
 
        String codeCivilite = entity.getCodeCivilite();
        if (codeCivilite != null) {
            stmt.bindString(3, codeCivilite);
        }
 
        String nom = entity.getNom();
        if (nom != null) {
            stmt.bindString(4, nom);
        }
 
        String prenom = entity.getPrenom();
        if (prenom != null) {
            stmt.bindString(5, prenom);
        }
 
        String raisonSocial = entity.getRaisonSocial();
        if (raisonSocial != null) {
            stmt.bindString(6, raisonSocial);
        }
 
        String complement = entity.getComplement();
        if (complement != null) {
            stmt.bindString(7, complement);
        }
 
        String adresse = entity.getAdresse();
        if (adresse != null) {
            stmt.bindString(8, adresse);
        }
 
        String cp = entity.getCp();
        if (cp != null) {
            stmt.bindString(9, cp);
        }
 
        String ville = entity.getVille();
        if (ville != null) {
            stmt.bindString(10, ville);
        }
 
        String telephone = entity.getTelephone();
        if (telephone != null) {
            stmt.bindString(11, telephone);
        }
 
        String fax = entity.getFax();
        if (fax != null) {
            stmt.bindString(12, fax);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(13, email);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ContactLight readEntity(Cursor cursor, int offset) {
        ContactLight entity = new ContactLight( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // idPP
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // codeCivilite
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nom
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // prenom
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // raisonSocial
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // complement
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // adresse
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // cp
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ville
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // telephone
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // fax
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // email
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactLight entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdPP(cursor.getString(offset + 1));
        entity.setCodeCivilite(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNom(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrenom(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRaisonSocial(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setComplement(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAdresse(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCp(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setVille(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTelephone(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setFax(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setEmail(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ContactLight entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ContactLight entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ContactLight entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
