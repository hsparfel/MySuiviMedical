package com.pouillos.mysuivimedical.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.pouillos.mysuivimedical.entities.FormePharmaceutique;

import com.pouillos.mysuivimedical.entities.Medicament;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEDICAMENT".
*/
public class MedicamentDao extends AbstractDao<Medicament, Long> {

    public static final String TABLENAME = "MEDICAMENT";

    /**
     * Properties of entity Medicament.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property CodeCIS = new Property(1, Long.class, "codeCIS", false, "CODE_CIS");
        public final static Property Denomination = new Property(2, String.class, "denomination", false, "DENOMINATION");
        public final static Property DenominationShort = new Property(3, String.class, "denominationShort", false, "DENOMINATION_SHORT");
        public final static Property FormePharmaceutiqueId = new Property(4, long.class, "formePharmaceutiqueId", false, "FORME_PHARMACEUTIQUE_ID");
        public final static Property Titulaire = new Property(5, String.class, "titulaire", false, "TITULAIRE");
    }

    private DaoSession daoSession;


    public MedicamentDao(DaoConfig config) {
        super(config);
    }
    
    public MedicamentDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEDICAMENT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CODE_CIS\" INTEGER," + // 1: codeCIS
                "\"DENOMINATION\" TEXT," + // 2: denomination
                "\"DENOMINATION_SHORT\" TEXT," + // 3: denominationShort
                "\"FORME_PHARMACEUTIQUE_ID\" INTEGER NOT NULL ," + // 4: formePharmaceutiqueId
                "\"TITULAIRE\" TEXT);"); // 5: titulaire
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEDICAMENT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Medicament entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long codeCIS = entity.getCodeCIS();
        if (codeCIS != null) {
            stmt.bindLong(2, codeCIS);
        }
 
        String denomination = entity.getDenomination();
        if (denomination != null) {
            stmt.bindString(3, denomination);
        }
 
        String denominationShort = entity.getDenominationShort();
        if (denominationShort != null) {
            stmt.bindString(4, denominationShort);
        }
        stmt.bindLong(5, entity.getFormePharmaceutiqueId());
 
        String titulaire = entity.getTitulaire();
        if (titulaire != null) {
            stmt.bindString(6, titulaire);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Medicament entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long codeCIS = entity.getCodeCIS();
        if (codeCIS != null) {
            stmt.bindLong(2, codeCIS);
        }
 
        String denomination = entity.getDenomination();
        if (denomination != null) {
            stmt.bindString(3, denomination);
        }
 
        String denominationShort = entity.getDenominationShort();
        if (denominationShort != null) {
            stmt.bindString(4, denominationShort);
        }
        stmt.bindLong(5, entity.getFormePharmaceutiqueId());
 
        String titulaire = entity.getTitulaire();
        if (titulaire != null) {
            stmt.bindString(6, titulaire);
        }
    }

    @Override
    protected final void attachEntity(Medicament entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Medicament readEntity(Cursor cursor, int offset) {
        Medicament entity = new Medicament( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // codeCIS
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // denomination
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // denominationShort
            cursor.getLong(offset + 4), // formePharmaceutiqueId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // titulaire
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Medicament entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCodeCIS(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setDenomination(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDenominationShort(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFormePharmaceutiqueId(cursor.getLong(offset + 4));
        entity.setTitulaire(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Medicament entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Medicament entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Medicament entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getFormePharmaceutiqueDao().getAllColumns());
            builder.append(" FROM MEDICAMENT T");
            builder.append(" LEFT JOIN FORME_PHARMACEUTIQUE T0 ON T.\"FORME_PHARMACEUTIQUE_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Medicament loadCurrentDeep(Cursor cursor, boolean lock) {
        Medicament entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        FormePharmaceutique formePharmaceutique = loadCurrentOther(daoSession.getFormePharmaceutiqueDao(), cursor, offset);
         if(formePharmaceutique != null) {
            entity.setFormePharmaceutique(formePharmaceutique);
        }

        return entity;    
    }

    public Medicament loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Medicament> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Medicament> list = new ArrayList<Medicament>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Medicament> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Medicament> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
